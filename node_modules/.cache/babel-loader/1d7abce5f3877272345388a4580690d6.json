{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Ravul\\\\Desktop\\\\chatApp\\\\react-firebase-authentication\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\nimport firebase from 'firebase';\nconst config = {\n  apiKey: \"AIzaSyB6MfPPiiYYNHSMAb-QCSgwv7wrv9N2vJs\",\n  authDomain: \"silichatapp.firebaseapp.com\",\n  databaseURL: \"https://silichatapp.firebaseio.com\",\n  projectId: \"silichatapp\",\n  storageBucket: \"silichatapp.appspot.com\",\n  messagingSenderId: \"659589044302\",\n  appId: \"1:659589044302:web:4a5676c49a8986aa6ecb1f\",\n  measurementId: \"G-WE3F4G7SKB\"\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.clearChat = () => {\n      var ref = this.db.ref().child('chatrooms').child('global');\n      console.log(\"hello button\");\n      ref.update({});\n    };\n\n    this.user = uid => this.db.ref(\"users/\".concat(uid));\n\n    this.userImage = uid => this.db.ref(\"users/images/\".concat(uid));\n\n    this.users = () => this.db.ref('users');\n\n    this.storageImage = uid => this.st.ref(\"users/\".concat(uid, \"/images\"));\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = app.database();\n    this.st = app.storage();\n  } // Auth API \n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["C:/Users/Ravul/Desktop/chatApp/react-firebase-authentication/src/components/Firebase/firebase.js"],"names":["app","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","clearChat","ref","db","child","console","log","update","userImage","users","storageImage","st","initializeApp","database","storage"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\nimport firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyB6MfPPiiYYNHSMAb-QCSgwv7wrv9N2vJs\",\r\n    authDomain: \"silichatapp.firebaseapp.com\",\r\n    databaseURL: \"https://silichatapp.firebaseio.com\",\r\n    projectId: \"silichatapp\",\r\n    storageBucket: \"silichatapp.appspot.com\",\r\n    messagingSenderId: \"659589044302\",\r\n    appId: \"1:659589044302:web:4a5676c49a8986aa6ecb1f\",\r\n    measurementId: \"G-WE3F4G7SKB\"\r\n  };\r\n\r\n  class Firebase {\r\n    constructor() {\r\n      app.initializeApp(config);\r\n\r\n      this.auth = app.auth();\r\n      this.db = app.database();\r\n      this.st = app.storage();\r\n    }\r\n\r\n    // Auth API \r\n    doCreateUserWithEmailAndPassword = (email, password) =>\r\n    this.auth.createUserWithEmailAndPassword(email, password);\r\n\r\n    doSignInWithEmailAndPassword = (email, password) =>\r\n    this.auth.signInWithEmailAndPassword(email, password);\r\n\r\n    doSignOut = () => this.auth.signOut();\r\n\r\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\r\n    doPasswordUpdate = password =>\r\n    this.auth.currentUser.updatePassword(password);\r\n\r\n     // *** Merge Auth and DB User API *** //\r\n\r\n  onAuthUserListener = (next, fallback) =>\r\n  this.auth.onAuthStateChanged(authUser => {\r\n    if (authUser) {\r\n      this.user(authUser.uid)\r\n        .once('value')\r\n        .then(snapshot => {\r\n          const dbUser = snapshot.val();\r\n\r\n          // default empty roles\r\n          if (!dbUser.roles) {\r\n            dbUser.roles = {};\r\n          }\r\n\r\n          // merge auth and db user\r\n          authUser = {\r\n            uid: authUser.uid,\r\n            email: authUser.email,\r\n            ...dbUser,\r\n          };\r\n\r\n          next(authUser);\r\n        });\r\n    } else {\r\n      fallback();\r\n    }\r\n  });\r\n// Chatroom API\r\n\r\nclearChat = () => \r\n{\r\n  var ref = this.db.ref().child('chatrooms').child('global');\r\n  console.log(\"hello button\");\r\n  ref.update({\r\n\r\n  });\r\n}\r\n// *** User API ***\r\n\r\nuser = uid => this.db.ref(`users/${uid}`);\r\nuserImage = uid => this.db.ref(`users/images/${uid}`);\r\nusers = () => this.db.ref('users');\r\n\r\n// ** Storage API **\r\nstorageImage = uid => this.st.ref(`users/${uid}/images`)\r\n  }\r\n  export default Firebase;"]},"metadata":{},"sourceType":"module"}